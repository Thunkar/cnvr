heat_template_version: 2017-02-24
description: Network

parameters:
    router_name: 
        type: string
        description: Name of the router
    zoo_net_name:
        type: string
        description: Name of the private network
    server_net_name:
        type: string
        description: Name of the private network
    zoo_snet_name:
        type: string
        description: Name of the zookeeper subnetwork
    server_snet_name:
        type: string
        description: Name of the server subnetwork
    pool_name:
        type: string
        description: Load balancer pool name

resources: 
    zoo_net: 
        type: OS::Neutron::Net
        properties: 
            name: { get_param: zoo_net_name }
    zoo_snet:
        type: OS::Neutron::Subnet 
        properties:
            name: { get_param: zoo_snet_name }
            network_id: { get_resource: zoo_net }
            cidr: 10.1.1.0/24
            allocation_pools:
            - start: 10.1.1.2
              end: 10.1.1.254
            dns_nameservers: [ 8.8.8.8, 8.8.4.4 ]
    server_net:
        type: OS::Neutron::Net
        properties: 
            name: { get_param: server_net_name }
    server_snet:
        type: OS::Neutron::Subnet 
        properties:
            name: { get_param: server_snet_name }
            network_id: { get_resource: server_net }
            cidr: 10.1.2.0/24
            allocation_pools:
            - start: 10.1.2.5
              end: 10.1.2.254
            dns_nameservers: [ 8.8.8.8, 8.8.4.4 ]
    monitor:
        type: OS::Neutron::LBaaS::HealthMonitor
        properties:
          delay: 3
          type: PING
          timeout: 3
          max_retries: 3
          pool: { get_resource: pool }
    pool:
        type: OS::Neutron::LBaaS::Pool
        properties:
          name: { get_param: pool_name }
          lb_algorithm: ROUND_ROBIN
          protocol: HTTP
          listener: { get_resource: listener }
    listener:
        type: OS::Neutron::LBaaS::Listener
        properties:
          loadbalancer: { get_resource: loadbalancer }
          protocol: HTTP
          protocol_port: 80
    loadbalancer:
        type: OS::Neutron::LBaaS::LoadBalancer
        properties:
          vip_subnet: { get_resource: server_snet }
    floating_ip:
        type: OS::Neutron::FloatingIP
        properties:
            floating_network: ExtNet
            port_id: { get_attr: [loadbalancer, vip_port_id ]}
    deny_all_rule:
        type: OS::Neutron::FirewallRule
        properties:
            name: DenyAll
            action: deny
    allow_outbound_rule:
        type: OS::Neutron::FirewallRule
        properties:
            name: AllowOutbound
            action: allow
            source_ip_address: 10.1.0.0/16
    allow_lb_rule:
        type: OS::Neutron::FirewallRule
        properties:
            name: AllowLB
            action: allow
            destination_ip_address: { get_attr: [loadbalancer, vip_address ]}
            destination_port: 80
    allow_admin_rule:
        type: OS::Neutron::FirewallRule
        properties:
            name: AllowAdmin
            action: allow
            destination_ip_address: 10.1.2.42
            destination_port: 22
    firewall_policy:
        type: OS::Neutron::FirewallPolicy
        properties:
            firewall_rules: [{ get_resource: allow_outbound_rule },{ get_resource: allow_lb_rule },{ get_resource: allow_admin_rule }, { get_resource: allow_lb_rule }, { get_resource: deny_all_rule } ]
    firewall:
        type: OS::Neutron::Firewall
        properties:
            firewall_policy_id: { get_resource: firewall_policy }
    router: 
        type: OS::Neutron::Router 
        properties:
            name: { get_param: router_name }
            external_gateway_info:
                network: ExtNet
    router_interface1:
        type: OS::Neutron::RouterInterface 
        properties:
            router_id: { get_resource: router }
            subnet_id: { get_resource: server_snet }
    router_interface2:
        type: OS::Neutron::RouterInterface 
        properties:
            router_id: { get_resource: router }
            subnet_id: { get_resource: zoo_snet }
